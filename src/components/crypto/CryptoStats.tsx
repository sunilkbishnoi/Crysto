import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { BarChart3, Info, TrendingUp, Sparkles, Download } from "lucide-react";
import { useEffect, useState } from "react";
import { useMarketStore } from "@/stores/marketStore";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/components/ui/use-toast";
import jsPDF from 'jspdf';

interface CryptoStatsProps {
  timeframe: number;
  currentPrice: string;
  priceChange: string;
  percentage: number;
  lowestPrice: string;
  highestPrice: string;
  isPriceUp: boolean;
  onAIAnalysis: () => void;
  symbol: string;
}

export function CryptoStats({
  timeframe,
  symbol,
  onAIAnalysis
}: CryptoStatsProps) {
  const [stats, setStats] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [analysisLoading, setAnalysisLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<string>('');
  const { currency } = useMarketStore();
  const { toast } = useToast();

  useEffect(() => {
    const fetchCryptoStats = async () => {
      try {
        const response = await fetch(
          `https://api.coingecko.com/api/v3/coins/${symbol}/market_chart?vs_currency=usd&days=${timeframe}&interval=${timeframe === 1 ? 'hourly' : 'daily'}`
        );
        const data = await response.json();

        if (data && data.prices && data.prices.length > 0) {
          const prices = data.prices;
          const currentPrice = prices[prices.length - 1][1];
          const oldestPrice = prices[0][1];
          const priceChange = currentPrice - oldestPrice;
          const percentageChange = (priceChange / oldestPrice) * 100;
          const lowestPrice = Math.min(...prices.map((price: any) => price[1]));
          const highestPrice = Math.max(...prices.map((price: any) => price[1]));
          const isPriceUp = priceChange >= 0;

          setStats({
            currentPrice: currentPrice,
            priceChange: priceChange,
            percentageChange: percentageChange,
            lowestPrice: lowestPrice,
            highestPrice: highestPrice,
            isPriceUp: isPriceUp,
          });
        } else {
          setStats({
            currentPrice: 0,
            priceChange: 0,
            percentageChange: 0,
            lowestPrice: 0,
            highestPrice: 0,
            isPriceUp: true,
          });
        }
      } catch (error) {
        console.error('Error fetching crypto stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchCryptoStats();
    const interval = setInterval(fetchCryptoStats, 30000);

    return () => clearInterval(interval);
  }, [symbol, timeframe]);

  const formatCurrency = (num: number) => {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: currency,
      maximumFractionDigits: 2,
    }).format(currency === 'USD' ? num : num * 83.12);
  };

  const handleAIAnalysis = async () => {
    try {
      setAnalysisLoading(true);
      const response = await fetch(
        "https://api.stack-ai.com/inference/v0/run/29b2f1c6-2e20-4afb-83c8-afa5afe73a1c/67b85058e1500b3f2d600b8a",
        {
          headers: {
            'Authorization': 'Bearer 59f6ba42-bde8-4bc2-8812-d764fd3eb299',
            'Content-Type': 'application/json'
          },
          method: "POST",
          body: JSON.stringify({
            "user_id": "crypto_analysis",
            "in-0": `give analysis of ${symbol} cryptocurrency`
          }),
        }
      );
      const result = await response.json();
      if (!result.outputs || !result.outputs["out-0"]) {
        throw new Error("Invalid API response format");
      }
      setAnalysisResult(result.outputs["out-0"]);
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: "Error",
        description: "Failed to fetch analysis. Please try again.",
        variant: "destructive",
      });
    } finally {
      setAnalysisLoading(false);
    }
  };

  const downloadPDF = () => {
    const pdf = new jsPDF();
    const disclaimer = "Disclaimer: This analysis is generated by AI and may contain errors or inaccuracies. Please use this information as one of many data points in your research process.";
    
    pdf.setFontSize(16);
    pdf.text(`Analysis Report for ${symbol}`, 20, 20);
    
    pdf.setFontSize(10);
    pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, 30);
    
    pdf.setFontSize(12);
    const formattedText = analysisResult.replace(/\*/g, '');
    const splitText = pdf.splitTextToSize(formattedText, 170);
    pdf.text(splitText, 20, 50);
    
    pdf.setFontSize(10);
    const disclaimerText = pdf.splitTextToSize(disclaimer, 170);
    pdf.text(disclaimerText, 20, pdf.internal.pageSize.height - 30);
    
    pdf.save(`${symbol}_analysis.pdf`);

    toast({
      title: "Success",
      description: "Analysis report downloaded successfully",
    });
  };

  if (loading) {
    return <div>Loading statistics...</div>;
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="text-sm font-medium">Statistics</CardTitle>
          <Info className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-muted-foreground">Current Price</p>
              <p className="text-lg font-bold">
                {stats ? formatCurrency(stats.currentPrice) : 'N/A'}
              </p>
            </div>
            <div>
              <p className="text-sm text-muted-foreground">Price Change</p>
              <p className={`text-lg font-bold ${stats?.isPriceUp ? 'text-green-500' : 'text-red-500'}`}>
                {stats ? `${stats.percentageChange.toFixed(2)}%` : 'N/A'}
              </p>
            </div>
            <div>
              <p className="text-sm text-muted-foreground">Lowest Price</p>
              <p className="text-lg font-bold">
                {stats ? formatCurrency(stats.lowestPrice) : 'N/A'}
              </p>
            </div>
            <div>
              <p className="text-sm text-muted-foreground">Highest Price</p>
              <p className="text-lg font-bold">
                {stats ? formatCurrency(stats.highestPrice) : 'N/A'}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="text-sm font-medium">Price Statistics</CardTitle>
          <BarChart3 className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Volume</span>
              <span className="font-medium">
                {stats ? stats.volume?.toLocaleString() : 'N/A'}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Market Cap</span>
              <span className="font-medium">
                {stats ? formatCurrency(stats.marketCap) : 'N/A'}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Circulating Supply</span>
              <span className="font-medium">
                {stats ? stats.circulatingSupply?.toLocaleString() : 'N/A'}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between pb-2">
          <CardTitle className="text-sm font-medium">Market Indicators</CardTitle>
          <TrendingUp className="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Trend Signal</span>
              <span className={`font-medium ${stats?.isPriceUp ? 'text-green-500' : 'text-red-500'}`}>
                {stats?.isPriceUp ? 'Bullish' : 'Bearish'}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Volatility</span>
              <span className="font-medium">
                {stats ? (Math.abs(stats.percentageChange) > 2 ? 'High' : 'Medium') : 'N/A'}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm text-muted-foreground">Market Phase</span>
              <span className="font-medium">
                {stats?.isPriceUp ? 'Accumulation' : 'Distribution'}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>

      <Button 
        className="w-full" 
        onClick={handleAIAnalysis}
        disabled={analysisLoading}
      >
        <Sparkles className="w-4 h-4 mr-2" />
        {analysisLoading ? "Generating Analysis..." : "Generate AI Analysis"}
      </Button>

      {analysisResult && (
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">AI Analysis Results</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="whitespace-pre-wrap break-words">
              {analysisResult}
            </div>
            <Alert className="mb-4">
              <AlertDescription>
                Disclaimer: This analysis is generated by AI and may contain errors or inaccuracies. 
                Please use this information as one of many data points in your research process.
              </AlertDescription>
            </Alert>
            <Button 
              onClick={downloadPDF}
              className="w-full gap-2"
              variant="outline"
            >
              <Download className="h-4 w-4" />
              Download Analysis as PDF
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
